// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package fetcher

import (
	"github.com/Goboolean/common/pkg/resolver"
	"github.com/Goboolean/core-system.worker/internal/infrastructure/mongo"
	"github.com/Goboolean/core-system.worker/internal/job"
)

// Injectors from wrie_setup.go:

func initializeRealtimeStock(p *job.UserParams) (Fetcher, error) {
	fetcherMongoConfig := provideMongoConfig()
	stockClientImpl, err := provideMongo(fetcherMongoConfig)
	if err != nil {
		return nil, err
	}
	realtimeStock, err := NewRealtimeStock(stockClientImpl, p)
	if err != nil {
		return nil, err
	}
	return realtimeStock, nil
}

func initializePastStock(p *job.UserParams) (Fetcher, error) {
	fetcherMongoConfig := provideMongoConfig()
	stockClientImpl, err := provideMongo(fetcherMongoConfig)
	if err != nil {
		return nil, err
	}
	pastStock, err := NewPastStock(stockClientImpl, p)
	if err != nil {
		return nil, err
	}
	return pastStock, nil
}

// wrie_setup.go:

type mongoConfig resolver.ConfigMap

func provideMongoConfig() mongoConfig {

	return mongoConfig(resolver.ConfigMap{})
}

func provideMongo(c mongoConfig) (*mongo.StockClientImpl, error) {
	in := resolver.ConfigMap(c)
	return mongo.NewStockClientImpl(&in)
}
