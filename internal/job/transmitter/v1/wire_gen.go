// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package v1

import (
	"github.com/Goboolean/core-system.worker/internal/infrastructure/influx"
	"github.com/Goboolean/core-system.worker/internal/job"
	"github.com/Goboolean/core-system.worker/internal/job/transmitter"
	"os"
)

// Injectors from wire_setup.go:

func Create(p *job.UserParams) (transmitter.Transmitter, error) {
	annotationDispatcher, err := provideAnnotationDispatcher()
	if err != nil {
		return nil, err
	}
	orderEventDispatcher, err := provideOrderEventDispatcher()
	if err != nil {
		return nil, err
	}
	common, err := NewCommon(annotationDispatcher, orderEventDispatcher, p)
	if err != nil {
		return nil, err
	}
	return common, nil
}

// wire_setup.go:

func provideOrderEventDispatcher() (transmitter.OrderEventDispatcher, error) {
	return influx.NewOrderEventDispatcher(&influx.Opts{
		Url:        os.Getenv("INFLUXDB_URL"),
		Token:      os.Getenv("INFLUXDB_TOKEN"),
		Org:        os.Getenv("INFLUXDB_ORG"),
		BucketName: os.Getenv("INFLUXDB_ORDER_EVENT_BUCKET"),
	})
}

func provideAnnotationDispatcher() (transmitter.AnnotationDispatcher, error) {
	return influx.NewAnnotationDispatcher(&influx.Opts{
		Url:        os.Getenv("INFLUXDB_URL"),
		Token:      os.Getenv("INFLUXDB_TOKEN"),
		Org:        os.Getenv("INFLUXDB_ORG"),
		BucketName: os.Getenv("INFLUXDB_ANNOTATION_BUCKET"),
	})
}
